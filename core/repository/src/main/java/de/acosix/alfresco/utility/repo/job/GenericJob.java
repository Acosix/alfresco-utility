/*
 * Copyright 2016 - 2019 Acosix GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.acosix.alfresco.utility.repo.job;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.PersistJobDataAfterExecution;

/**
 * Instances of this interface are invoked as relays of {@link Job} instances based on the
 * {@link de.acosix.alfresco.utility.core.repo.quartz1.InvocationRelayJob} or
 * {@link de.acosix.alfresco.utility.core.repo.quartz2.InvocationRelayJob}
 * implementation, depending on which Quartz version is in use in the Alfresco installation on which these instances have been configured.
 * Usage of this interface requires that job details be generated by {@link GenericJobDetailsFactoryBean a special job detail factory}.
 *
 * The primary drawback of using this interface is that job implementations cannot use {@link DisallowConcurrentExecution} or
 * {@link PersistJobDataAfterExecution} annotations. This is a negligible limitation since those are rarely if ever used in Alfresco
 * extensions.
 *
 * @author Axel Faust
 */
public interface GenericJob
{

    /**
     * Executes the logic of this job.
     *
     * @param jobExecutionContext
     *            the execution context for this invocation
     * @see Job#execute(JobExecutionContext)
     */
    void execute(Object jobExecutionContext);
}
